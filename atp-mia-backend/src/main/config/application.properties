spring.config.use-legacy-processing=true
spring.main.allow-circular-references=true
spring.main.allow-bean-definition-overriding=true
spring.servlet.multipart.max-request-size=10MB
spring.servlet.multipart.max-file-size=10MB
server.shutdown=graceful
server.port=8080
server.forward-headers-strategy=NATIVE
dos2unix.path=./dos2unix/dos2unix
ssh.close.delay=${SSH_CLOSE_DELAY:300}
db.close.delay=${DB_CLOSE_DELAY:300}
db.alive.length=${DB_ALIVE_LENGTH:300}
db.execution.timeout=${DB_EXECUTION_TIMEOUT:30}
db.execution.records.limit=${DB_EXECUTION_RECORDS_LIMIT:50}
db.server.keep.alive=${DB_SERVER_KEEP_ALIVE:30000}
response.file.size.limit.bytes=${RESPONSE_FILE_SIZE_LIMIT_BYTES:1000000}
rest.execution.timeout=${ATP_MIA_REST_EXECUTION_TIMEOUT:5}
##=====================Other Service URLs =========================
catalogue.url=${CATALOGUE_URL:}
#==================Data Base Connection==============================
spring.datasource.url=${JDBC_URL:jdbc:postgresql://${PG_DB_ADDR:localhost}:${PG_DB_PORT:5432}/${MIA_DB_NAME:mia}}
spring.datasource.username=${MIA_USER}
spring.datasource.password=${MIA_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.hikari.minimum-idle=${HIKARI_MIN_POOL_SIZE:10}
spring.datasource.hikari.maximum-pool-size=${HIKARI_MAX_POOL_SIZE:100}
spring.datasource.hikari.max-lifetime=${HIKARI_MAX_LIFE_TIME:1800000}
spring.jackson.default-property-inclusion=non_null
spring.jpa.properties.hibernate.event.merge.entity_copy_observer=allow
#==================Data Base Batch==============================
spring.jpa.properties.hibernate.jdbc.batch_size=${HIBERNATE_BATCH_SIZE:20}
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.batch_versioned_data=true
## ================== Logging level========================
logging.level.org.qubership.atp.mia=${MIA_LOG_LEVEL:INFO}
logging.level.com.jcraft.jsch=${JSCH_LOG_LEVEL:ERROR}
##=====================Liquibase =========================
spring.liquibase.change-log=classpath:db/changelog/changelog-main.xml
logging.level.liquibase=INFO
service.entities.migration.enabled=${SERVICE_ENTITIES_MIGRATION_ENABLED:false}
##=====================MIA Proof Of Testing =========================
mia.pot.minLogLength=${MIA_POT_MIN_LOG_LENGTH:5}
mia.pot.maxLinesLogs=${MIA_POT_MAX_LINES_LOGS:1000}
mia.pot.maxTableRows=${MIA_POT_MAX_TABLE_ROWS:100}
##==================Git repository info(config)======================
git.reposUser=${GIT_USER:#{null}}
git.reposPass=${GIT_PASS:#{null}}
git.reposEmail=${GIT_EMAIL:example@example.com}
git.reposToken=${GIT_TOKEN:#{null}}
git.reposUserId=${GIT_USER_ID:2202}
git.reposUrl=${GIT_URL:https://git.somedomain.com/}
git.reposApiPath=${GIT_API_PATH:api/v4/projects/%s/members/all/%s}
git.defaultAccessLevel=${GIT_DEFAULT_ACCESS_LEVEL:40}
##==================Integration with Spring Cloud======================
spring.application.name=${SERVICE_NAME:atp-mia}
eureka.client.enabled=${EUREKA_CLIENT_ENABLED:false}
eureka.client.serviceUrl.defaultZone=${SERVICE_REGISTRY_URL:http://atp-registry-service:1234/eureka}
atp.service.public=${ATP_SERVICE_PUBLIC:true}
atp.service.path=${ATP_SERVICE_PATH:/api/atp-mia/v1/**}
eureka.instance.preferIpAddress=${EUREKA_INSTANCE_PREFER_IP_ADDRESS:true}
##==================atp-auth-spring-boot-starter=====================
spring.profiles.active=${SPRING_PROFILES:disable-security}
spring.cache.cache-names=auth_projects
spring.cache.caffeine.spec=maximumSize=100, expireAfterAccess=120s, expireAfterWrite=120s, recordStats
keycloak.enabled=${KEYCLOAK_ENABLED:false}
keycloak.public-client=true
keycloak.ssl-required=external
keycloak.bearer-only=true
keycloak.cors=true
keycloak.auth-server-url=${KEYCLOAK_AUTH_URL:localhost}
keycloak.realm=${KEYCLOAK_REALM:testRealm}
keycloak.resource=${KEYCLOAK_CLIENT_NAME:testRealm}
keycloak.credentials.secret=${KEYCLOAK_SECRET:""}
atp-auth.project_info_endpoint=${PROJECT_INFO_ENDPOINT:""}
atp-auth.policies-path=policies.yaml
atp-auth.enable-m2m=true
atp-auth.headers.content-security-policy=${CONTENT_SECURITY_POLICY:default-src 'self' *}
##==================HAZELCAST====================
spring.cache.hazelcast.cluster-name=${HAZELCAST_CLUSTER_NAME:atp-hc}
spring.cache.hazelcast.client.enable=${HAZELCAST_ENABLE:false}
spring.cache.hazelcast.server.enable=${HAZELCAST_SERVER_ENABLED:false}
spring.cache.hazelcast.server.port=${HAZELCAST_SERVER_PORT:5701}
spring.cache.hazelcast.server.address=${HAZELCAST_SERVER_ADDRESS:127.0.0.1}
##==================Kafka========================
kafka.enable=${KAFKA_ENABLE:false}
kafka.catalog.notification.group=${KAFKA_CATALOG_GROUP:atp_mia_catalog_notification_group}
kafka.catalog.notification.topic=${KAFKA_CATALOG_TOPIC:catalog_notification_topic}
kafka.server=${KAFKA_SERVERS:kafka:9092}
kafka.mia.execution.finish.topic=${KAFKA_MIA_EXECUTION_FINISH_TOPIC:mia_execution_finish}
kafka.mia.execution.finish.partitions=${KAFKA_MIA_EXECUTION_FINISH_TOPIC_PARTITIONS:1}
kafka.mia.execution.finish.replicas=${KAFKA_MIA_EXECUTION_FINISH_TOPIC_REPLICATION_FACTOR:3}
kafka.itf.import.group=${KAFKA_ITF_IMPORT_GROUP:atp_mia_itf_lite_to_mia_export_group}
kafka.itf.import.topic=${KAFKA_ITF_IMPORT_TOPIC:itf_lite_to_mia_export_start}
kafka.itf.import.end.topic=${KAFKA_ITF_IMPORT_END_TOPIC:itf_lite_to_mia_export_finish}
kafka.itf.import.end.partitions=${KAFKA_ITF_IMPORT_END_PARTITIONS:1}
kafka.itf.import.end.replicas=${KAFKA_ITF_IMPORT_END_TOPIC_REPLICATION_FACTOR:3}
kafka.env.update.listen.group=${KAFKA_ENVIRONMENT_UPDATE_LISTEN_GROUP:atp_mia_env_update_listen_group}
kafka.env.update.listen.topic=${KAFKA_ENVIRONMENT_UPDATE_TOPIC:environments_notification_topic}
kafka.handler.backoff.interval=${KAFKA_HANDLER_BACKOFF_INTERVAL:1000}
kafka.retry.backoff.period=${KAFKA_RETRY_BACKOFF_PERIOD:1000}
kafka.service.entities.topic=${KAFKA_SERVICE_ENTITIES_TOPIC:service_entities}
kafka.service.entities.topic.partitions=${KAFKA_SERVICE_ENTITIES_TOPIC_PARTITIONS:1}
kafka.service.entities.topic.replicas=${KAFKA_SERVICE_ENTITIES_TOPIC_REPLICATION_FACTOR:3}
spring.kafka.producer.bootstrap-servers=${KAFKA_SERVERS:kafka:9092}
##==================Zipkin=====================
spring.sleuth.enabled=${ZIPKIN_ENABLE:false}
spring.sleuth.sampler.probability=${ZIPKIN_PROBABILITY:1.0}
spring.zipkin.baseUrl=${ZIPKIN_URL:http://127.0.0.1:9411}
spring.sleuth.web.additional-skip-pattern=/
## ================== Feign ========================
atp.service.internal=${ATP_INTERNAL_GATEWAY_ENABLED:false}
## catalogue
feign.atp.catalogue.url=${FEIGN_ATP_CATALOGUE_URL:}
feign.atp.catalogue.name=${FEIGN_ATP_CATALOGUE_NAME:ATP-CATALOGUE}
feign.atp.catalogue.route=${FEIGN_ATP_CATALOGUE_ROUTE:}
## environments
feign.atp.environments.url=${FEIGN_ATP_ENVIRONMENTS_URL:}
feign.atp.environments.name=${FEIGN_ATP_ENVIRONMENTS_NAME:ATP-ENVIRONMENTS}
feign.atp.environments.route=${FEIGN_ATP_ENVIRONMENTS_ROUTE:}
## export-import
feign.atp.ei.url=${FEIGN_ATP_EI_URL:}
feign.atp.ei.name=${FEIGN_ATP_EI_NAME:ATP-EXPORT-IMPORT}
feign.atp.ei.route=${FEIGN_ATP_EI_ROUTE:api/atp-export-import/v1}
## users
feign.atp.users.url=${FEIGN_ATP_USERS_URL:}
feign.atp.users.name=${FEIGN_ATP_USERS_NAME:ATP-USERS-BACKEND}
feign.atp.users.route=${FEIGN_ATP_USERS_ROUTE:api/atp-users-backend/v1}
feign.httpclient.disableSslValidation=true
feign.httpclient.enabled=false
feign.okhttp.enabled=true
feign.client.config.default.connectTimeout=${FEIGN_CONNECT_TIMEOUT:300000}
feign.client.config.default.readTimeout=${FEIGN_READ_TIMEOUT:300000}
feign.client.config.default.loggerLevel=${FEIGN_LOGGER_LEVEL:basic}
## macros
# feign.atp.macros.name value should be mandatory even when macros disabled, but with any name
feign.atp.macros.enabled=${FEIGN_ATP_MACROS_ENABLED:true}
feign.atp.macros.url=${FEIGN_ATP_MACROS_URL:}
feign.atp.macros.name=${FEIGN_ATP_MACROS_NAME:ATP-MACROS}
feign.atp.macros.route=${FEIGN_ATP_MACROS_ROUTE:}
## feign client for atp-notification service
feign.atp.notification.url=${FEIGN_ATP_NOTIFICATION_URL:}
feign.atp.notification.name=${FEIGN_ATP_NOTIFICATION_NAME:atp-notification}
feign.atp.notification.route=${FEIGN_ATP_NOTIFICATION_ROUTE:api/atp-notification/v1}
#==================locale resolver==================================
locale.resolver.lang=${LOCALE_RESOLVER:en}
## ================== Monitoring ========================
management.server.port=${MONITOR_PORT:8090}
management.endpoints.web.exposure.include=${MONITOR_WEB_EXPOSE:*}
management.endpoints.web.base-path=${MONITOR_WEB_BASE:/}
management.endpoints.web.path-mapping.prometheus=${MONITOR_WEB_MAP_PROM:metrics}
management.metrics.tags.application=${spring.application.name}
management.endpoints.enabled-by-default=false
management.endpoint.prometheus.enabled=true
management.endpoint.flowable.enabled=true
## ================== GridFS ========================
gridfs.enable=${MIA_DB_ENABLE:false}
gridfs.username=${MIA_DB_USER:root}
gridfs.password=${MIA_DB_PASSWORD:root}
gridfs.database=${MIA_DB:admin}
gridfs.host=${MONGO_DB_ADDR:localhost}
gridfs.port=${MONGO_DB_PORT:27017}
gridfs.clean.period.days=${MIA_DB_CLEAN_PERIOD_DAYS:14}
## ================== Crypto ========================
atp.crypto.key=${ATP_CRYPTO_KEY:{ENC}{}{Sck4jAe1F2+uknItF3x4gS6jKaghLUPaYL9+FCip8xxB0R/3vfzbG70rBrC7/utroXr4bdyzICWTxJ+mQHZwBCcEt0JENU1rwoN2z9Y9Q/hfL6agLYSxuc1w2yFMM8MU8fJyrA5586cfMtCi3f5wHzh7WljjcsB8J6CptbCKC7PNoIdAa8VX2DhvRIReWsLrhhe1bbzl/GhqhqIf9Gr2CALUsAZwnv+NyfjTVExuWJWdDP0BS8gnlAlVJyQZGiYJmrsNsNRhC1Rhhg59jvDv9sm+zBUw81G62w+JJP+36XOnRIuuSC6RxckrypQFM04a+XolV6KuhShhoW+zv2IlwQ==}}
atp.crypto.privateKey=${ATP_CRYPTO_PRIVATE_KEY:MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCSs7+T9jYks2wplAIkKZAQZWSzD6sDnfNnkkAHAe4eh1E4OQDyc+Gay11QCxaM0VFwl3JHeFst/fXYMJNsAh7kX00arNDb6QXABoilKDtFY4FPzXJlG6JmLjzJhREl2cH4V5mar1Wb7NQgWeHOBOfYnnwsKUKMI2wRgEhJnkQl5cFFElGikanyAPTq1YTfLVG3ijXDVzI/acSCv/FPEVlyXB0TpolkIOY5KWkDRkNN28Q22ED1CWAw7NV8o9Hgmo+z1gwSDk75ms9zpS/P38LMj0aqhC0ixzQ+WFmf5ODGAE+kShk3JZ7rUmj4PewnyfdAxE6ib80t0z23J1dm8TLdAgMBAAECggEAZ04YjFMHEZUfh6/oShrSjhk4bjeMT8G8k6STXdvoGKtlcFgD6LfdmKm4jhMg0AzecpDTMqz4WEzMAG9EgPyFUIAjxbMIaLORDwYK13KbOmO1vcKI2dY56AaLW8VOq/7J7t2RFzJ88I43Woiwz+j4crw36MktSY3wHerd/Klsh9pO0bPjGLQsSEcJk6BiEjB+hVqBSZa3ioA4uvTP48Tr8T+eLTNu81NI4XeibwmRypyUr4FrAYLubMOYoIO2H9XC68dO6whjmiJ3UeAE/TQ31OipZz74vzwNuT0zYLo3kWqxVesLp1ia/q9nqjYinXqcDJIv1fEBZU5BE4NsgZPZwQKBgQDUEZQy0k1Si+gafcFFBfxnGpnDWSosAgi7ytXvt8Y2YNo3VgNOZ1ykf9bqZezckMo2kPcy5CUEjQHxzjGqq+Ot5qYMyfh0vZ/h8X89IVPxwiDylPhUU0QNk4G9X8Sbw8z+z6tb98++wYbtVCcYFeYNZ4MWYI1usjfBpkYPZYZ/CQKBgQCxF6c7M1IPPUB15bfhWv2ihf2Z5hC/+/JIytUT54XOFd6xZ5TlUwudJcQIpUruCDJilzZBicaA8N4AUKoNtr1eNDf1gXJO+eyyZXN4SH6WIpSXP9MMxmNtX/3H356NyfkqpAZtteMjDfIwW4L7UtF0iuI0zmvxCUhxJoWqLyU2NQKBgFiANY64ARjP1j8n9/4sL1d/3GeP0G+pMafdUEbINOoApVCujparwBfOWgxcGOs7aYg4G1GbsG8jwYn9+PA2579tICL6LrvZXt3WALmsLPIZh9J0pOXcEexwgJZdXxl6LxSv6d1pn8MF1J86nU4J5YX2ithN1vg5W9du4pIOVoCxAoGBAJfVzd4mLE9Alwn+gV/IYfp8o2jWJrpUS/E5ZuN/9+swORUl2DWetDBydtdq0QmxIXICb9RVSkq3OcBPaN4FNeuVHf1ylQ09n0F9Vjlk/pO+5mOfp1YmqozWZoJ+KjUrXGTA6XobHrmpdWMcsvrEkS04/qWD7mxlJyVMgAHgFimZAoGBANIatOQqXT3i4rfvfN8JeFA0RbOAFXqbMb8Ty0IhVEdvj4MNYhRwmaFnW/my2WQcldufGM5FjWbSc4/cEuVp1q4ybhQ8q3XbZQpdRrt5PlZPxgN7ctxTcTI67d7/I+Rf6io+fKaOrPnxHdJqjQj9kNbYG5iAZ20GbR7aCGVuKEaE}
#==================Common-logging========================================
atp.logging.resttemplate.headers=${ATP_HTTP_LOGGING_HEADERS:true}
atp.logging.resttemplate.headers.ignore=${ATP_HTTP_LOGGING_HEADERS_IGNORE: }
atp.logging.feignclient.headers=${ATP_HTTP_LOGGING_HEADERS:true}
atp.logging.feignclient.headers.ignore=${ATP_HTTP_LOGGING_HEADERS_IGNORE: }
atp.logging.controller.headers=${ATP_HTTP_LOGGING_HEADERS:true}
atp.logging.controller.headers.ignore=${ATP_HTTP_LOGGING_HEADERS_IGNORE:}
atp.logging.controller.uri.ignore=${ATP_HTTP_LOGGING_URI_IGNORE:/rest/deployment/readiness /rest/deployment/liveness /sse/.*}
#==================Cron jobs========================================
atp.mia.cron.clean.gridfs=${ATP_MIA_CRON_CLEAN_GRIDFS:0 30 1 * * *}
atp.mia.cron.clean.mongoProjectFiles=${ATP_MIA_CRON_CLEAN_GRIDFS_PROJECT_FILES:0 30 2 * * *}
atp.mia.cron.clean.metric=${ATP_MIA_CRON_CLEAN_METRIC:0 0 0 * * *}
atp.mia.cron.clean.logs=${ATP_MIA_CRON_CLEAN_LOGS:0 0 * * * *}
atp.mia.cron.clean.postgresql=${ATP_MIA_CRON_CLEAN_POSTGRESQL:0 0 1 * * *}
atp.clean.logs.interval.hours=${ATP_CLEAN_LOGS_INTERVAL_HOURS:1}
## ==================Swagger========================
springdoc.api-docs.enabled=${SWAGGER_ENABLED:true}
##=============Audit=================
atp.audit.logging.enable=${AUDIT_LOGGING_ENABLE:false}
atp.audit.logging.topic.name=${AUDIT_LOGGING_TOPIC_NAME:audit_logging_topic
atp.reporting.kafka.producer.bootstrap-server=${KAFKA_REPORTING_SERVERS:kafka:9092}
atp.audit.logging.topic.partitions=${AUDIT_LOGGING_TOPIC_PARTITIONS:1}
atp.audit.logging.topic.replicas=${AUDIT_LOGGING_TOPIC_REPLICAS:3}
##=============Logging=================
logging.level.root=INFO
logging.level.org=INFO
logging.level.sun=INFO
#logging.file.name=console.log
spring.jpa.properties.hibernate.generate_statistics=true
spring.jpa.properties.hibernate.session.events.log=false
##=============Lock Manager========================
atp.lock.default.duration.sec=${LOCK_DEFAULT_DURATION_SEC:60}
atp.lock.retry.timeout.sec=${LOCK_RETRY_TIMEOUT_SEC:600}
atp.lock.retry.pace.sec=${LOCK_RETRY_PACE_SEC:3}
##==========SSE=====================
atp.mia.sse.timeout=${MIA_SSE_TIMEOUT:7200000}
atp.mia.sse.ping.timeout=${MIA_SSE_PING_TIMEOUT:30000}
##===================EI GridFS==================
ei.gridfs.database=${EI_GRIDFS_DB:dbname}
ei.gridfs.host=${EI_GRIDFS_DB_ADDR:gridfs.mongocluster.svc}
ei.gridfs.port=${EI_GRIDFS_DB_PORT:27017}
ei.gridfs.user=${EI_GRIDFS_USER:user}
ei.gridfs.password=${EI_GRIDFS_PASSWORD:pass}
##=============Nashorn security========================
nashorn.args="-strict --no-java --no-syntax-extensions"
## ================ Javers =================
javers.springDataAuditableRepositoryAspectEnabled=${JAVERS_ENABLED:true}
javers.sqlGlobalIdCacheDisabled=true
## ======= Max History Records =======
history.records.limit=100
