name: Maven deploy

on:
  workflow_call:
    inputs:
      java-version:
        type: string
        description: "JDK version (e.g. '21')"
        required: false
        default: "21"
      maven-version:
        type: string
        description: maven version
        required: false
        default: ''
      target-store:
        type: string
        description: "Target store for the artifact"
        required: false
        default: "maven-central"
      additional-mvn-args:
        type: string
        description: "Additional mvn cmd-line params (e.g. '-Dskip.tests=true')"
        required: false
        default: ""
      artifact-id:
        default: artifact
        required: false
        type: string
    secrets:
      maven-username:
        required: false
      maven-token:
        required: true
      gpg-private-key:
        required: false
      gpg-passphrase:
        required: false

jobs:
  mvn-deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: centos/postgresql-96-centos7:9.6
        ports:
          - 5432:5432
        env:
          POSTGRESQL_USER: mia
          POSTGRESQL_PASSWORD: mia
          POSTGRESQL_DATABASE: mia
          POSTGRESQL_ADMIN_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres -d mia"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
      mongo:
        image: mongo:4.2
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: root
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongo --eval 'db.runCommand({ ping: 1 })'" 
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
      cassandra:
        image: cassandra:3.11.6
        ports:
          - "9042:9042"
        options: >-
          --health-cmd "cqlsh -e 'describe keyspaces'" 
          --health-interval 10s 
          --health-timeout 10s 
          --health-retries 30

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4
      - name: "Setup xmlstarlet"
        run: |
          # Skip installing pacakge docs {makes the man-db trigger much faster)
          sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc > /dev/null << 'EOF'
          path-exclude /usr/share/doc/*
          path-exclude /usr/share/man/*
          path-exclude /usr/share/info/*
          EOF
          sudo apt install -y xmlstarlet

      - name: "Check that version is SNAPSHOT"
        shell: bash
        run: |
          cd ${GITHUB_WORKSPACE}
          VERSION_CHECK=$(xmlstarlet sel -N x="http://maven.apache.org/POM/4.0.0" -t -v "/x:project/x:version[contains(., '{revision}')]" ./pom.xml || echo "")
          # If project/version is not a reference to project/properties/revision, then check project/version if it contains '-SNAPSHOT'
          # Else check project/properties/revision if it contains '-SNAPSHOT'
          if [[ "${VERSION_CHECK}" == "" ]]
          then
            IS_SNAPSHOT=$(xmlstarlet sel -N x="http://maven.apache.org/POM/4.0.0" -t -v "/x:project/x:version[contains(., '-SNAPSHOT')]" ./pom.xml || echo "")
          else
            IS_SNAPSHOT=$(xmlstarlet sel -N x="http://maven.apache.org/POM/4.0.0" -t -v "/x:project/x:properties/x:revision[contains(., '-SNAPSHOT')]" ./pom.xml || echo "")
          fi
          if [[ "${IS_SNAPSHOT}" == "" ]]
          then
            echo "ℹ️ The project's version in the pom.xml has no '-SNAPSHOT' postfix." >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ Workflow will not deploy any artifacts. It will execute 'mvn install' command." >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ The project's version in the pom.xml has no '-SNAPSHOT' postfix."
            echo "ℹ️ Workflow will not deploy any artifacts. It will execute 'mvn install' command."
            echo "IS_SNAPSHOT=false" >> $GITHUB_ENV
            echo "MVN_COMMAND=install" >> $GITHUB_ENV
          else
            echo "✅ The project's version in the pom.xml has '-SNAPSHOT' postfix" >> $GITHUB_STEP_SUMMARY
            echo "✅ Workflow will deploy SNAPSHOT artifact" >> $GITHUB_STEP_SUMMARY
            echo "✅ The project's version in the pom.xml has '-SNAPSHOT' postfix."
            echo "✅ Workflow will deploy SNAPSHOT artifact"
            echo "IS_SNAPSHOT=true" >> $GITHUB_ENV
            echo "MVN_COMMAND=deploy" >> $GITHUB_ENV
          fi

      - name: "Setup mvn additional args"
        shell: bash
        run: |
          if [[ "${{ inputs.additional-mvn-args }}" == "" ]]
          then
            echo "ℹ️ No additional mvn args provided. Using default ones." >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ No additional mvn args provided. Using default ones."
          else
            ADDITIONAL_MVN_ARGS=""
            for arg in ${{ inputs.additional-mvn-args }}
            do
              ADDITIONAL_MVN_ARGS="${ADDITIONAL_MVN_ARGS} \"${arg}\""
            done
            echo "✅ Additional mvn args provided: ${ADDITIONAL_MVN_ARGS}" >> $GITHUB_STEP_SUMMARY
            echo "✅ Additional mvn args provided: ${ADDITIONAL_MVN_ARGS}"
          fi
          echo "ADDITIONAL_MVN_ARGS=${ADDITIONAL_MVN_ARGS}" >> $GITHUB_ENV

      - name: Install DB clients
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          pip3 install cqlsh

      - name: Wait for Postgres to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -U postgres -d mia; then
              echo "Postgres is ready"
              break
            fi
            echo "Waiting for Postgres..."
            sleep 5
          done

      - name: Create uuid-ossp extension
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -d mia -c 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";'

      - name: Wait for MongoDB to be ready using mongosh Docker container
        run: |
          for i in {1..30}; do
            if docker run --rm --network container:${{ job.services.mongo.id }} mongo:6.0 mongosh -u mongo_user -p mongo_user --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 })' > /dev/null 2>&1; then
              echo "✅ MongoDB is ready"
              break
            fi
            echo "⏳ Waiting for MongoDB... ($i/30)"
            sleep 5
          done

      - name: Show MongoDB logs for debugging
        run: | 
          docker logs ${{ job.services.mongo.id }}

      - name: Wait for Cassandra to be ready
        run: |
          for i in {1..30}; do
            if cqlsh -e "DESCRIBE keyspaces" > /dev/null 2>&1; then
              echo "Cassandra is ready"
              break
            fi
            echo "Waiting for Cassandra..."
            sleep 5
          done
          
      - name: Show Cassandra logs
        run: |
          docker logs $(docker ps -q --filter "ancestor=cassandra:3.11.6")

      - name: Install OpenSSH
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-server

      - name: Settings for SSH
        run: |
          sudo mkdir -p /var/run/sshd
          echo "root:test_password" | sudo chpasswd
          sudo sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
          
          sudo rm -f /etc/ssh/ssh_host_rsa_key /etc/ssh/ssh_host_rsa_key.pub
          sudo rm -f /etc/ssh/ssh_host_ecdsa_key /etc/ssh/ssh_host_ecdsa_key.pub
          sudo rm -f /etc/ssh/ssh_host_ed25519_key /etc/ssh/ssh_host_ed25519_key.pub
          sudo rm -f /etc/ssh/ssh_host_dsa_key /etc/ssh/ssh_host_dsa_key.pub
          
          sudo ssh-keygen -P "" -t rsa -f /etc/ssh/ssh_host_rsa_key
          sudo ssh-keygen -P "" -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key
          sudo ssh-keygen -P "" -t ed25519 -f /etc/ssh/ssh_host_ed25519_key
          sudo ssh-keygen -P "" -t dsa -f /etc/ssh/ssh_host_dsa_key
          
          echo "NOTVISIBLE=in users profile" >> $GITHUB_ENV
          echo "VISIBLE=now" >> $GITHUB_ENV
    
          sudo service ssh start

      - name: Generation keys for SSH
        run: |
          sudo sed -i 's/^#HostKey \/etc\/ssh\/ssh_host_rsa_key/HostKey \/etc\/ssh\/ssh_host_rsa_key/' /etc/ssh/sshd_config
          sudo sed -i 's/^#HostKey \/etc\/ssh\/ssh_host_ecdsa_key/HostKey \/etc\/ssh\/ssh_host_ecdsa_key/' /etc/ssh/sshd_config
          sudo sed -i 's/^#HostKey \/etc\/ssh\/ssh_host_ed25519_key/HostKey \/etc\/ssh\/ssh_host_ed25519_key/' /etc/ssh/sshd_config
          sudo service ssh restart

      - name: Check connection
        run: |
          sleep 3
          mkdir -p ~/.ssh
          ssh-keyscan -p 22 localhost >> ~/.ssh/known_hosts
          sudo service ssh status 
          ss -tnlp | grep ssh
          sudo ssh-keygen -A
          getent passwd root
          cat /etc/ssh/sshd_config
          ls -l /etc/ssh/ssh_host_*
          grep HostKey /etc/ssh/sshd_config
          ls -l /etc/ssh/ssh_host_sk_ed25519_key*
          sshpass -p test_password ssh root@localhost -p 22 echo "✅ SSH working"

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}
          restore-keys: |
            maven-${{ runner.os }}

      - name: Set up Maven
        if: ${{ inputs.maven-version != '' }}
        uses: stCarolas/setup-maven@d6af6abeda15e98926a57b5aa970a96bb37f97d1
        with:
          maven-version: ${{ inputs.maven-version }}

      # ================= Maven Central deployment part
      - name: "Set up JDK for Maven Central deployment"
        if: ${{ inputs.target-store == 'maven-central' }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: "temurin"
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.gpg-private-key }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: "Deploy to Maven Central"
        if: ${{ inputs.target-store == 'maven-central' }}
        run: |
          mvn --batch-mode ${{ env.MVN_COMMAND }} ${ADDITIONAL_MVN_ARGS}
        env:
          MAVEN_USERNAME: ${{ secrets.maven-username }}
          MAVEN_PASSWORD: ${{ secrets.maven-token }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.gpg-passphrase }}

      - name: Upload all Maven target directories
        if: ${{ inputs.target-store == 'maven-central' }}
        uses: actions/upload-artifact@v4
        with:
          name: qubership-testing-platform-mia
          path: '**/target'